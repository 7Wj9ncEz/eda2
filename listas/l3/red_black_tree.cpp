#include <bits/stdc++.h>
#define BLACK 0
#define RED 1

using namespace std;

typedef struct _node {
    int value, color;
    struct _node *parent, *left, *right;
} node;

int count_rotations = 0;

node* grandpa(node* n);
node* uncle(node* n);
const char* print_color(int c);
void print_node(string label, node* n);

class RBTree {
    public:
        node *root;

        RBTree() {
            root = nullptr;
        }

        void insert(int val);
        void case1(node* n);
        void case2(node* n);
        void case3(node* n);
        void case4(node* n);
        void case5(node* n);
        void rotate_left(node* n);
        void rotate_right(node* n);
        void pre_order(node *n, int step = 0);
};

// Main function
int main(){
    //    vector<int> v { 41, 5, 90, 39, 79, 45, 81, 65, 59, 66 };
    //    vector<int> v { 10,7, 6, 8, 12, 11, 13 };
    vector<int> v = { 20, 35, 56, 72, 75, 121, 175, 198, 203, 205, 227, 244, 278, 283, 285, 291, 365, 370, 384, 431, 445, 456, 461, 462, 465, 564, 564, 573, 606, 607, 615, 622, 644, 650, 770, 803, 805, 817, 819, 822, 911, 1009, 1028, 1090, 1136, 1163, 1174, 1201, 1233, 1289, 1297, 1300, 1353, 1357, 1369, 1372, 1394, 1491, 1529, 1543, 1580, 1596, 1598, 1601, 1635, 1643, 1675, 1683, 1716, 1725, 1741, 1751, 1777, 1779, 1790, 1821, 1823, 1833, 1853, 1885, 1902, 1943, 1985, 2016, 2017, 2037, 2040, 2060, 2075, 2092, 2124, 2135, 2236, 2243, 2260, 2293, 2330, 2370, 2390, 2476, 2590, 2599, 2604, 2624, 2705, 2757, 2763, 2763, 2772, 2772, 2803, 2825, 2883, 2898, 2939, 3001, 3032, 3033, 3087, 3287, 3295, 3359, 3384, 3427, 3485, 3504, 3527, 3579, 3585, 3631, 3680, 3715, 3721, 3723, 3745, 3853, 3857, 3863, 3971, 3985, 4010, 4024, 4061, 4076, 4076, 4115, 4124, 4131, 4139, 4141, 4150, 4159, 4182, 4195, 4216, 4277, 4288, 4326, 4364, 4417, 4443, 4480, 4522, 4539, 4583, 4638, 4645, 4686, 4689, 4706, 4708, 4743, 4779, 4790, 4811, 4812, 4822, 4826, 4837, 4862, 4875, 4919, 4929, 4986, 5041, 5066, 5084, 5157, 5171, 5177, 5195, 5312, 5328, 5383, 5418, 5436, 5442, 5463, 5483, 5488, 5519, 5526, 5531, 5532, 5561, 5607, 5626, 5644, 5695, 5698, 5796, 5842, 5851, 5868, 5873, 5995, 6006, 6108, 6151, 6189, 6207, 6211, 6238, 6239, 6250, 6267, 6329, 6335, 6347, 6370, 6374, 6409, 6444, 6506, 6507, 6514, 6533, 6540, 6540, 6641, 6643, 6679, 6728, 6745, 6749, 6898, 6903, 6909, 6973, 6975, 7026, 7092, 7097, 7235, 7237, 7247, 7266, 7277, 7283, 7332, 7341, 7361, 7407, 7413, 7420, 7472, 7508, 7510, 7547, 7558, 7568, 7639, 7646, 7656, 7664, 7693, 7704, 7714, 7716, 7719, 7728, 7744, 7749, 7755, 7766, 7770, 7796, 7830, 7831, 7841, 7863, 7896, 7932, 7936, 7954, 7966, 7967, 7975, 7984, 7991, 8009, 8014, 8019, 8057, 8106, 8111, 8125, 8126, 8132, 8143, 8177, 8184, 8197, 8231, 8247, 8248, 8250, 8259, 8280, 8303, 8314, 8323, 8350, 8373, 8446, 8485, 8532, 8543, 8611, 8641, 8646, 8646, 8675, 8699, 8738, 8740, 8750, 8790, 8791, 8794, 8809, 8828, 8866, 8897, 8968, 9023, 9034, 9055, 9058, 9061, 9062, 9062, 9095, 9130, 9140, 9144, 9145, 9159, 9163, 9164, 9165, 9175, 9187, 9215, 9248, 9287, 9313, 9327, 9332, 9338, 9349, 9409, 9421, 9493, 9506, 9518, 9528, 9538, 9574, 9654, 9656, 9681, 9751, 9774, 9780, 9784, 9794, 9803, 9818, 9908, 9922, 9945, 9957, 10047, 10053, 10057, 10063, 10064, 10112, 10115, 10133, 10133, 10162, 10182, 10268, 10289, 10306, 10315, 10348, 10406, 10430, 10434, 10435, 10441, 10470, 10545, 10563, 10585, 10585, 10654, 10660, 10676, 10696, 10747, 10780, 10808, 10824, 10848, 10905, 10927, 10930, 10933, 10962, 10973, 10987, 10991, 11081, 11101, 11144, 11150, 11202, 11327, 11334, 11344, 11405, 11455, 11459, 11462, 11480, 11490, 11503, 11566, 11573, 11610, 11625, 11709, 11732, 11738, 11741, 11742, 11743, 11779, 11858, 11861, 11868, 11879, 11886, 11892, 11896, 11909, 11924, 11938, 11953, 11987, 11987, 11990, 12008, 12022, 12043, 12056, 12065, 12113, 12130, 12139, 12233, 12236, 12246, 12261, 12265, 12317, 12342, 12356, 12438, 12458, 12512, 12537, 12537, 12549, 12558, 12571, 12574, 12594, 12622, 12632, 12650, 12664, 12697, 12708, 12742, 12805, 12809, 12904, 12907, 12909, 12928, 12956, 13029, 13092, 13109, 13131, 13132, 13134, 13161, 13166, 13191, 13227, 13230, 13240, 13255, 13269, 13270, 13290, 13299, 13331, 13346, 13355, 13363, 13452, 13460, 13486, 13519, 13599, 13626, 13647, 13648, 13698, 13754, 13762, 13864, 13964, 13975, 14120, 14132, 14140, 14142, 14188, 14238, 14238, 14252, 14324, 14341, 14349, 14349, 14382, 14389, 14396, 14396, 14416, 14429, 14446, 14490, 14500, 14577, 14592, 14608, 14623, 14681, 14697, 14718, 14725, 14769, 14820, 14853, 14856, 14875, 14887, 15005, 15015, 15033, 15056, 15068, 15077, 15097, 15125, 15175, 15178, 15201, 15213, 15224, 15241, 15247, 15249, 15257, 15320, 15349, 15351, 15414, 15427, 15428, 15455, 15495, 15497, 15528, 15537, 15585, 15623, 15626, 15634, 15637, 15654, 15664, 15669, 15674, 15713, 15729, 15751, 15755, 15764, 15796, 15840, 15842, 15898, 15948, 15951, 15994, 16016, 16027, 16060, 16087, 16143, 16201, 16211, 16256, 16261, 16295, 16311, 16324, 16353, 16384, 16424, 16450, 16452, 16494, 16522, 16540, 16544, 16586, 16601, 16610, 16671, 16705, 16707, 16711, 16743, 16754, 16792, 16809, 16814, 16816, 16840, 16855, 16879, 16905, 16925, 16979, 17008, 17044, 17066, 17123, 17134, 17161, 17167, 17198, 17224, 17245, 17247, 17253, 17259, 17285, 17331, 17351, 17359, 17375, 17431, 17456, 17480, 17481, 17503, 17520, 17522, 17530, 17541, 17695, 17754, 17779, 17788, 17799, 17812, 17844, 17851, 17851, 17859, 17871, 17877, 17884, 17895, 17977, 17980, 17995, 18009, 18022, 18052, 18087, 18119, 18155, 18166, 18179, 18255, 18290, 18290, 18291, 18294, 18351, 18364, 18408, 18429, 18466, 18523, 18533, 18534, 18552, 18575, 18586, 18655, 18673, 18723, 18740, 18744, 18749, 18777, 18800, 18821, 18827, 18837, 18846, 18862, 18870, 18885, 18894, 18906, 18986, 18988, 19036, 19040, 19052, 19056, 19082, 19125, 19183, 19187, 19189, 19201, 19213, 19233, 19233, 19263, 19270, 19298, 19319, 19366, 19378, 19381, 19417, 19440, 19494, 19505, 19527, 19572, 19578, 19610, 19613, 19626, 19664, 19692, 19693, 19694, 19750, 19816, 19853, 19863, 19891, 19935, 20047, 20082, 20094, 20098, 20153, 20163, 20167, 20172, 20177, 20202, 20272, 20287, 20322, 20322, 20340, 20345, 20348, 20356, 20359, 20446, 20473, 20474, 20481, 20518, 20534, 20546, 20578, 20595, 20637, 20760, 20854, 20891, 20925, 20936, 20946, 20983, 20987, 21007, 21016, 21072, 21084, 21100, 21102, 21159, 21221, 21256, 21321, 21341, 21370, 21386, 21400, 21423, 21426, 21431, 21463, 21552, 21557, 21620, 21624, 21638, 21712, 21722, 21725, 21753, 21753, 21822, 21831, 21840, 21867, 21869, 21894, 21901, 21971, 21988, 22059, 22076, 22092, 22139, 22169, 22177, 22183, 22191, 22248, 22259, 22263, 22268, 22315, 22329, 22339, 22344, 22345, 22384, 22399, 22404, 22501, 22506, 22511, 22539, 22562, 22581, 22588, 22594, 22666, 22723, 22730, 22743, 22775, 22790, 22833, 22863, 22950, 22983, 22997, 23000, 23021, 23057, 23076, 23079, 23083, 23096, 23106, 23107, 23114, 23180, 23242, 23313, 23335, 23380, 23380, 23388, 23389, 23389, 23409, 23484, 23509, 23530, 23562, 23586, 23596, 23644, 23644, 23715, 23734, 23737, 23773, 23819, 23824, 23870, 23878, 23893, 23900, 23903, 23915, 23948, 23951, 23995, 24015, 24027, 24039, 24043, 24080, 24082, 24095, 24114, 24174, 24190, 24192, 24227, 24241, 24277, 24281, 24284, 24323, 24445, 24459, 24483, 24485, 24516, 24558, 24564, 24566, 24596, 24641, 24696, 24704, 24740, 24743, 24761, 24768, 24776, 24781, 24784, 24809, 24837, 24876, 24932, 24933, 24938 };

    count_rotations = 0;
    RBTree* tree = new RBTree();

    for(auto c : v){
        // printf("--------------------------------------------------\n");
        // printf("Inserting [%d]\n", c);
        tree->insert(c);
        //
        // printf("--------------------------------------------------\n");
        // printf("Current tree\n");
        // tree->pre_order(tree->root);
        //
        // printf("--------------------------------------------------\n");
        // printf("Finish inserting %d\n", c);
        // printf("--------------------------------------------------\n");
        // cout << endl;
    }

    // printf("Complete tree\n");
    // cout << endl;
    // tree->pre_order(tree->root);
    // cout << endl;

    printf("Red Black Tree\n");
    printf("Number of rotations: %d\n", count_rotations);

    return 0;
}

// Auxiliar methods
node* grandpa(node* n){
    if(n && n->parent)
        return n->parent->parent;
    return nullptr;
}

node* uncle(node* n){
    node *g = grandpa(n);

    if(g == nullptr)
        return nullptr;
    if(g->left == n->parent)
        return g->right;
    return g->left;
}

const char* print_color(int c){
    return c ? "RED" : "BLACK";
}

void print_node(string label, node* n){
    printf("Node [%s]: ", label.c_str());
    if(n)
        printf("[%d, %s]\n", n->value, print_color(n->color));
    else
        printf("null\n");
}

// RBTree methods
void RBTree::insert(int val){
    node* n = (node*) malloc(sizeof(node));
    n->value = val;
    n->color = RED;
    n->left = nullptr;
    n->right = nullptr;


    if(root == nullptr){
        root = n;
        n->parent = nullptr;
    }
    else{
        node* aux = root, *q = nullptr;

        while(aux != nullptr){
            q = aux;
            if(val > aux->value)
                aux = aux->right;
            else
                aux = aux->left;
        }

        n->parent = q;
        if(q->value > n->value)
            q->left = n;
        else
            q->right = n;
    }

    case1(n);
}

void RBTree::case1(node* n){
    if(root == n){
        n->color = BLACK;
        return;
    }
    else{
        case2(n);
    }
}

void RBTree::case2(node* n){
    if(n->parent->color == BLACK){
        return;
    }
    else{
        case3(n);
    }
}

void RBTree::case3(node* n){
    node* u = uncle(n);
    node* g = grandpa(n);

    if(u && u->color == RED){
        n->parent->color = BLACK;
        u->color = BLACK;
        g->color = RED;

        case1(g);
    }
    else{
        case4(n);
    }
}

void RBTree::case4(node* n){
    node *g = grandpa(n);

    if(g->left == n->parent && n->parent->right == n){
        rotate_left(n->parent);
        n = n->left;
    }
    else if(g->right == n->parent && n->parent->left == n){
        rotate_right(n->parent);
        n = n->right;
    }

    case5(n);
}

void RBTree::case5(node* n){
    node *g = grandpa(n);

    n->parent->color = BLACK;
    g->color = RED;

    if(g->right == n->parent && n->parent->right == n){
        rotate_left(g);
    }
    else if(g->left == n->parent && n->parent->left == n){
        rotate_right(g);
    }
}

void RBTree::rotate_right(node* n){
    count_rotations++;
    // check if n is leaf
    if(n->left == nullptr)
        return;

    node* q = n->left;
    node* temp = q->right;

    n->left = temp;
    if(temp){
        temp->parent = n;
    }

    if(n->parent){
        q->parent = n->parent;

        if(n->parent->left == n)
            n->parent->left = q;
        else
            n->parent->right = q;
    }
    else{
        root = q;
    }

    q->right = n;
    n->parent = q;
}

void RBTree::rotate_left(node* n){
    count_rotations++;
    // check if n is leaf
    if(n->right == nullptr)
        return;

    node* q = n->right;
    node* temp = q->left;

    n->right = temp;
    if(temp){
        temp->parent = n;
    }

    if(n->parent){
        q->parent = n->parent;

        if(n->parent->left == n)
            n->parent->left = q;
        else
            n->parent->right = q;
    }
    else{
        root = q;
    }

    q->left = n;
    n->parent = q;
}

void RBTree::pre_order(node *n, int step){
    for(int i=0;i<step;i++) printf(" ");
    if(n == nullptr){
        printf("null\n");
        return;
    }

    printf("[%d, %s]\n", n->value, print_color(n->color));

    pre_order(n->left, step + 4);
    pre_order(n->right, step + 4);
}
